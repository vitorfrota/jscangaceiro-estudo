{"version":3,"sources":["../../app-src/util/ConnectionFactory.js"],"names":["stores","connection","close","ConnectionFactory","constructor","Error","getConnection","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","onerror","console","log","error","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoincrement","closeConnection"],"mappings":";;;;;;AAAA,kBAAMA,SAAS,CAAC,aAAD,CAAf;;AAEA,gBAAIC,aAAa,IAAjB;AACA,gBAAIC,QAAQ,IAAZ;;AAEO,kBAAMC,iBAAN,CAAwB;AAC3BC,8BAAa;AACT,0BAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;AACH;;AAED,uBAAOC,aAAP,GAAsB;AAClB,2BAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;AACnC,4BAAGR,UAAH,EAAe,OAAOO,QAAQP,UAAR,CAAP;;AAEf,8BAAMS,cAAcC,UAAUC,IAAV,CAAe,cAAf,EAA+B,CAA/B,CAApB;;AAEAF,oCAAYG,eAAZ,GAA8BC,KAAK;AAC/BX,8CAAkBY,aAAlB,CAAgCD,EAAEE,MAAF,CAASC,MAAzC;AACH,yBAFD;;AAIAP,oCAAYQ,SAAZ,GAAwBJ,KAAK;AACzBb,yCAAaa,EAAEE,MAAF,CAASC,MAAtB;;AAEAf,oCAAQD,WAAWC,KAAX,CAAiBiB,IAAjB,CAAsBlB,UAAtB,CAAR;;AAEAA,uCAAWC,KAAX,GAAmB,MAAM;AACrB,sCAAM,IAAIG,KAAJ,CAAU,6CAAV,CAAN;AACH,6BAFD;AAGAG,oCAAQM,EAAEE,MAAF,CAASC,MAAjB;AACH,yBATD;;AAWAP,oCAAYU,OAAZ,GAAsBN,KAAK;AACvBO,oCAAQC,GAAR,CAAYR,EAAEE,MAAF,CAASO,KAArB;AACAd,mCAAOK,EAAEE,MAAF,CAASC,MAAhB;AACH,yBAHD;AAIH,qBAxBM,CAAP;AAyBH;;AAED,uBAAOF,aAAP,CAAqBd,UAArB,EAAgC;AAC5BD,2BAAOwB,OAAP,CAAeC,SAAS;AACpB,4BAAGxB,WAAWyB,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAH,EACAxB,WAAW2B,iBAAX,CAA6BH,KAA7B;;AAEAxB,mCAAW4B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAAEK,eAAe,IAAjB,EAApC;AACH,qBALD;AAMH;;AAED,uBAAOC,eAAP,GAAwB;AACpB,wBAAG9B,UAAH,EAAeC;AAClB;AA5C0B;;;AA6C9B","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\r\n\r\nlet connection = null;\r\nlet close = null;\r\n\r\nexport class ConnectionFactory {\r\n    constructor(){\r\n        throw new Error('Não é possível criar instâncias dessa classe!');\r\n    }\r\n\r\n    static getConnection(){\r\n        return new Promise((resolve, reject)=> {\r\n            if(connection) return resolve(connection);\r\n\r\n            const openRequest = indexedDB.open('jscangaceiro', 2);\r\n\r\n            openRequest.onupgradeneeded = e => {\r\n                ConnectionFactory._createStores(e.target.result);\r\n            };\r\n\r\n            openRequest.onsuccess = e => {\r\n                connection = e.target.result;\r\n\r\n                close = connection.close.bind(connection);\r\n\r\n                connection.close = () => {\r\n                    throw new Error('Você não pode fechar diretamente a conexão!');\r\n                }\r\n                resolve(e.target.result);\r\n            };\r\n\r\n            openRequest.onerror = e => {\r\n                console.log(e.target.error);\r\n                reject(e.target.result);\r\n            };\r\n        });   \r\n    }\r\n\r\n    static _createStores(connection){\r\n        stores.forEach(store => {\r\n            if(connection.objectStoreNames.contains(store))\r\n            connection.deleteObjectStore(store)\r\n\r\n            connection.createObjectStore(store, { autoincrement: true });\r\n        });\r\n    }\r\n\r\n    static closeConnection(){\r\n        if(connection) close()\r\n    }\r\n};"]}